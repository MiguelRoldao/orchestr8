/*
 * generated by Xtext 2.26.0
 */
package org.xtext.orchestr8_test.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class Orch8GrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.orchestr8_test.Orch8.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cScoresAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cScoresScoreParserRuleCall_0_0_0 = (RuleCall)cScoresAssignment_0_0.eContents().get(0);
		private final Assignment cInstrumentsAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cInstrumentsInstrumentParserRuleCall_0_1_0 = (RuleCall)cInstrumentsAssignment_0_1.eContents().get(0);
		private final Assignment cMixerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMixerMixerParserRuleCall_1_0 = (RuleCall)cMixerAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cScoresAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cScoresScoreParserRuleCall_2_0_0 = (RuleCall)cScoresAssignment_2_0.eContents().get(0);
		private final Assignment cInstrumentsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cInstrumentsInstrumentParserRuleCall_2_1_0 = (RuleCall)cInstrumentsAssignment_2_1.eContents().get(0);
		
		//Model returns Model:
		//    (scores+=Score | instruments+=Instrument)*
		//    mixer=Mixer
		//    (scores+=Score | instruments+=Instrument)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(scores+=Score | instruments+=Instrument)*
		//mixer=Mixer
		//(scores+=Score | instruments+=Instrument)*
		public Group getGroup() { return cGroup; }
		
		//(scores+=Score | instruments+=Instrument)*
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//scores+=Score
		public Assignment getScoresAssignment_0_0() { return cScoresAssignment_0_0; }
		
		//Score
		public RuleCall getScoresScoreParserRuleCall_0_0_0() { return cScoresScoreParserRuleCall_0_0_0; }
		
		//instruments+=Instrument
		public Assignment getInstrumentsAssignment_0_1() { return cInstrumentsAssignment_0_1; }
		
		//Instrument
		public RuleCall getInstrumentsInstrumentParserRuleCall_0_1_0() { return cInstrumentsInstrumentParserRuleCall_0_1_0; }
		
		//mixer=Mixer
		public Assignment getMixerAssignment_1() { return cMixerAssignment_1; }
		
		//Mixer
		public RuleCall getMixerMixerParserRuleCall_1_0() { return cMixerMixerParserRuleCall_1_0; }
		
		//(scores+=Score | instruments+=Instrument)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//scores+=Score
		public Assignment getScoresAssignment_2_0() { return cScoresAssignment_2_0; }
		
		//Score
		public RuleCall getScoresScoreParserRuleCall_2_0_0() { return cScoresScoreParserRuleCall_2_0_0; }
		
		//instruments+=Instrument
		public Assignment getInstrumentsAssignment_2_1() { return cInstrumentsAssignment_2_1; }
		
		//Instrument
		public RuleCall getInstrumentsInstrumentParserRuleCall_2_1_0() { return cInstrumentsInstrumentParserRuleCall_2_1_0; }
	}
	public class SetupCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.orchestr8_test.Orch8.SetupCommand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCmdTempoParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCmdTimeSignatureParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCmdInstrumentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCmdSetParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//SetupCommand returns Command:
		//    CmdTempo | CmdTimeSignature | CmdInstrument | CmdSet
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//CmdTempo | CmdTimeSignature | CmdInstrument | CmdSet
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CmdTempo
		public RuleCall getCmdTempoParserRuleCall_0() { return cCmdTempoParserRuleCall_0; }
		
		//CmdTimeSignature
		public RuleCall getCmdTimeSignatureParserRuleCall_1() { return cCmdTimeSignatureParserRuleCall_1; }
		
		//CmdInstrument
		public RuleCall getCmdInstrumentParserRuleCall_2() { return cCmdInstrumentParserRuleCall_2; }
		
		//CmdSet
		public RuleCall getCmdSetParserRuleCall_3() { return cCmdSetParserRuleCall_3; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.orchestr8_test.Orch8.Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCmdTempoParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCmdTimeSignatureParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCmdPlayParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCmdInstrumentParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCmdSetParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Command returns Command:
		//    CmdTempo | CmdTimeSignature | CmdPlay | CmdInstrument | CmdSet;
		@Override public ParserRule getRule() { return rule; }
		
		//CmdTempo | CmdTimeSignature | CmdPlay | CmdInstrument | CmdSet
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CmdTempo
		public RuleCall getCmdTempoParserRuleCall_0() { return cCmdTempoParserRuleCall_0; }
		
		//CmdTimeSignature
		public RuleCall getCmdTimeSignatureParserRuleCall_1() { return cCmdTimeSignatureParserRuleCall_1; }
		
		//CmdPlay
		public RuleCall getCmdPlayParserRuleCall_2() { return cCmdPlayParserRuleCall_2; }
		
		//CmdInstrument
		public RuleCall getCmdInstrumentParserRuleCall_3() { return cCmdInstrumentParserRuleCall_3; }
		
		//CmdSet
		public RuleCall getCmdSetParserRuleCall_4() { return cCmdSetParserRuleCall_4; }
	}
	public class MixerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.orchestr8_test.Orch8.Mixer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMixerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSampling_rateKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSampling_rateAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSampling_rateEIntParserRuleCall_3_1_0 = (RuleCall)cSampling_rateAssignment_3_1.eContents().get(0);
		private final Keyword cScoresKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cScoresAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cScoresScoreCrossReference_6_0 = (CrossReference)cScoresAssignment_6.eContents().get(0);
		private final RuleCall cScoresScoreEStringParserRuleCall_6_0_1 = (RuleCall)cScoresScoreCrossReference_6_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cScoresAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cScoresScoreCrossReference_7_1_0 = (CrossReference)cScoresAssignment_7_1.eContents().get(0);
		private final RuleCall cScoresScoreEStringParserRuleCall_7_1_0_1 = (RuleCall)cScoresScoreCrossReference_7_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Mixer returns Mixer:
		//    'Mixer' name=EString '{'
		//        ('sampling_rate' sampling_rate=EInt)?
		//        'scores' '{' scores+=[Score|EString] (',' scores+=[Score|EString])* '}'
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Mixer' name=EString '{'
		//    ('sampling_rate' sampling_rate=EInt)?
		//    'scores' '{' scores+=[Score|EString] (',' scores+=[Score|EString])* '}'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Mixer'
		public Keyword getMixerKeyword_0() { return cMixerKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('sampling_rate' sampling_rate=EInt)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'sampling_rate'
		public Keyword getSampling_rateKeyword_3_0() { return cSampling_rateKeyword_3_0; }
		
		//sampling_rate=EInt
		public Assignment getSampling_rateAssignment_3_1() { return cSampling_rateAssignment_3_1; }
		
		//EInt
		public RuleCall getSampling_rateEIntParserRuleCall_3_1_0() { return cSampling_rateEIntParserRuleCall_3_1_0; }
		
		//'scores'
		public Keyword getScoresKeyword_4() { return cScoresKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//scores+=[Score|EString]
		public Assignment getScoresAssignment_6() { return cScoresAssignment_6; }
		
		//[Score|EString]
		public CrossReference getScoresScoreCrossReference_6_0() { return cScoresScoreCrossReference_6_0; }
		
		//EString
		public RuleCall getScoresScoreEStringParserRuleCall_6_0_1() { return cScoresScoreEStringParserRuleCall_6_0_1; }
		
		//(',' scores+=[Score|EString])*
		public Group getGroup_7() { return cGroup_7; }
		
		//','
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//scores+=[Score|EString]
		public Assignment getScoresAssignment_7_1() { return cScoresAssignment_7_1; }
		
		//[Score|EString]
		public CrossReference getScoresScoreCrossReference_7_1_0() { return cScoresScoreCrossReference_7_1_0; }
		
		//EString
		public RuleCall getScoresScoreEStringParserRuleCall_7_1_0_1() { return cScoresScoreEStringParserRuleCall_7_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class ScoreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.orchestr8_test.Orch8.Score");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScoreKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSetupKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSetupAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSetupSetupCommandParserRuleCall_3_1_0 = (RuleCall)cSetupAssignment_3_1.eContents().get(0);
		private final Assignment cMeasuresAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMeasuresMeasureParserRuleCall_4_0 = (RuleCall)cMeasuresAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cEndKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cEndAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cEndSetupCommandParserRuleCall_5_1_0 = (RuleCall)cEndAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Score returns Score:
		//    'Score' name=EString '{'
		//        ('@Setup' (setup+=SetupCommand)* )?
		//        (measures+=Measure)+
		//        ('@End' (end+=SetupCommand)* )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Score' name=EString '{'
		//    ('@Setup' (setup+=SetupCommand)* )?
		//    (measures+=Measure)+
		//    ('@End' (end+=SetupCommand)* )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Score'
		public Keyword getScoreKeyword_0() { return cScoreKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('@Setup' (setup+=SetupCommand)* )?
		public Group getGroup_3() { return cGroup_3; }
		
		//'@Setup'
		public Keyword getSetupKeyword_3_0() { return cSetupKeyword_3_0; }
		
		//(setup+=SetupCommand)*
		public Assignment getSetupAssignment_3_1() { return cSetupAssignment_3_1; }
		
		//SetupCommand
		public RuleCall getSetupSetupCommandParserRuleCall_3_1_0() { return cSetupSetupCommandParserRuleCall_3_1_0; }
		
		//(measures+=Measure)+
		public Assignment getMeasuresAssignment_4() { return cMeasuresAssignment_4; }
		
		//Measure
		public RuleCall getMeasuresMeasureParserRuleCall_4_0() { return cMeasuresMeasureParserRuleCall_4_0; }
		
		//('@End' (end+=SetupCommand)* )?
		public Group getGroup_5() { return cGroup_5; }
		
		//'@End'
		public Keyword getEndKeyword_5_0() { return cEndKeyword_5_0; }
		
		//(end+=SetupCommand)*
		public Assignment getEndAssignment_5_1() { return cEndAssignment_5_1; }
		
		//SetupCommand
		public RuleCall getEndSetupCommandParserRuleCall_5_1_0() { return cEndSetupCommandParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class InstrumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.orchestr8_test.Orch8.Instrument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInstrumentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cGeneratorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGeneratorGeneratorParserRuleCall_3_0 = (RuleCall)cGeneratorAssignment_3.eContents().get(0);
		private final Assignment cParametersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParametersParameterParserRuleCall_4_0 = (RuleCall)cParametersAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Instrument returns Instrument:
		//    'Instrument' name=EString '{'
		//        generator=Generator
		//        (parameters+=Parameter)*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Instrument' name=EString '{'
		//    generator=Generator
		//    (parameters+=Parameter)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Instrument'
		public Keyword getInstrumentKeyword_0() { return cInstrumentKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//generator=Generator
		public Assignment getGeneratorAssignment_3() { return cGeneratorAssignment_3; }
		
		//Generator
		public RuleCall getGeneratorGeneratorParserRuleCall_3_0() { return cGeneratorGeneratorParserRuleCall_3_0; }
		
		//(parameters+=Parameter)*
		public Assignment getParametersAssignment_4() { return cParametersAssignment_4; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_4_0() { return cParametersParameterParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.orchestr8_test.Orch8.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.orchestr8_test.Orch8.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//    '-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class EDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.orchestr8_test.Orch8.EDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cEKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cEKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//EDouble returns ecore::EDouble:
		//    '-'? INT? '.' INT (('E'|'e') '-'? INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT? '.' INT (('E'|'e') '-'? INT)?
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
		
		//(('E'|'e') '-'? INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//('E'|'e')
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//'E'
		public Keyword getEKeyword_4_0_0() { return cEKeyword_4_0_0; }
		
		//'e'
		public Keyword getEKeyword_4_0_1() { return cEKeyword_4_0_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_4_1() { return cHyphenMinusKeyword_4_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4_2() { return cINTTerminalRuleCall_4_2; }
	}
	public class MeasureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.orchestr8_test.Orch8.Measure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMeasureAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCommercialAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIDAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIDEIntParserRuleCall_2_0 = (RuleCall)cIDAssignment_2.eContents().get(0);
		private final Assignment cBeatsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBeatsBeatParserRuleCall_3_0 = (RuleCall)cBeatsAssignment_3.eContents().get(0);
		
		//Measure returns Measure:
		//    {Measure}
		//    '@' ID=EInt
		//    (beats+=Beat)+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Measure}
		//'@' ID=EInt
		//(beats+=Beat)+
		public Group getGroup() { return cGroup; }
		
		//{Measure}
		public Action getMeasureAction_0() { return cMeasureAction_0; }
		
		//'@'
		public Keyword getCommercialAtKeyword_1() { return cCommercialAtKeyword_1; }
		
		//ID=EInt
		public Assignment getIDAssignment_2() { return cIDAssignment_2; }
		
		//EInt
		public RuleCall getIDEIntParserRuleCall_2_0() { return cIDEIntParserRuleCall_2_0; }
		
		//(beats+=Beat)+
		public Assignment getBeatsAssignment_3() { return cBeatsAssignment_3; }
		
		//Beat
		public RuleCall getBeatsBeatParserRuleCall_3_0() { return cBeatsBeatParserRuleCall_3_0; }
	}
	public class CmdInstrumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.orchestr8_test.Orch8.CmdInstrument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTypeInstrumentKeyword_0_0 = (Keyword)cTypeAssignment_0.eContents().get(0);
		private final Assignment cParameterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParameterParameterParserRuleCall_1_0 = (RuleCall)cParameterAssignment_1.eContents().get(0);
		
		//CmdInstrument returns CmdInstrument:
		//    type='instrument' parameter=Parameter
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type='instrument' parameter=Parameter
		public Group getGroup() { return cGroup; }
		
		//type='instrument'
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//'instrument'
		public Keyword getTypeInstrumentKeyword_0_0() { return cTypeInstrumentKeyword_0_0; }
		
		//parameter=Parameter
		public Assignment getParameterAssignment_1() { return cParameterAssignment_1; }
		
		//Parameter
		public RuleCall getParameterParameterParserRuleCall_1_0() { return cParameterParameterParserRuleCall_1_0; }
	}
	public class CmdPlayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.orchestr8_test.Orch8.CmdPlay");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTypePlayKeyword_0_0 = (Keyword)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNoteAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNoteNOTETerminalRuleCall_1_0 = (RuleCall)cNoteAssignment_1.eContents().get(0);
		private final Keyword cLengthKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLengthAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLengthEDoubleParserRuleCall_3_0 = (RuleCall)cLengthAssignment_3.eContents().get(0);
		
		//CmdPlay returns CmdPlay:
		//    type='play' note=NOTE 'length' length=EDouble
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type='play' note=NOTE 'length' length=EDouble
		public Group getGroup() { return cGroup; }
		
		//type='play'
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//'play'
		public Keyword getTypePlayKeyword_0_0() { return cTypePlayKeyword_0_0; }
		
		//note=NOTE
		public Assignment getNoteAssignment_1() { return cNoteAssignment_1; }
		
		//NOTE
		public RuleCall getNoteNOTETerminalRuleCall_1_0() { return cNoteNOTETerminalRuleCall_1_0; }
		
		//'length'
		public Keyword getLengthKeyword_2() { return cLengthKeyword_2; }
		
		//length=EDouble
		public Assignment getLengthAssignment_3() { return cLengthAssignment_3; }
		
		//EDouble
		public RuleCall getLengthEDoubleParserRuleCall_3_0() { return cLengthEDoubleParserRuleCall_3_0; }
	}
	public class CmdTempoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.orchestr8_test.Orch8.CmdTempo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTypeTempoKeyword_0_0 = (Keyword)cTypeAssignment_0.eContents().get(0);
		private final Assignment cBpmAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBpmEIntParserRuleCall_1_0 = (RuleCall)cBpmAssignment_1.eContents().get(0);
		
		//CmdTempo returns CmdTempo:
		//    type='tempo' bpm=EInt
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type='tempo' bpm=EInt
		public Group getGroup() { return cGroup; }
		
		//type='tempo'
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//'tempo'
		public Keyword getTypeTempoKeyword_0_0() { return cTypeTempoKeyword_0_0; }
		
		//bpm=EInt
		public Assignment getBpmAssignment_1() { return cBpmAssignment_1; }
		
		//EInt
		public RuleCall getBpmEIntParserRuleCall_1_0() { return cBpmEIntParserRuleCall_1_0; }
	}
	public class CmdTimeSignatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.orchestr8_test.Orch8.CmdTimeSignature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTypeTime_signatureKeyword_0_0 = (Keyword)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNumeratorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNumeratorEIntParserRuleCall_1_0 = (RuleCall)cNumeratorAssignment_1.eContents().get(0);
		private final Keyword cSolidusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDenominatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDenominatorEIntParserRuleCall_3_0 = (RuleCall)cDenominatorAssignment_3.eContents().get(0);
		
		//CmdTimeSignature returns CmdTimeSignature:
		//    type='time_signature' numerator=EInt '/' denominator=EInt
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type='time_signature' numerator=EInt '/' denominator=EInt
		public Group getGroup() { return cGroup; }
		
		//type='time_signature'
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//'time_signature'
		public Keyword getTypeTime_signatureKeyword_0_0() { return cTypeTime_signatureKeyword_0_0; }
		
		//numerator=EInt
		public Assignment getNumeratorAssignment_1() { return cNumeratorAssignment_1; }
		
		//EInt
		public RuleCall getNumeratorEIntParserRuleCall_1_0() { return cNumeratorEIntParserRuleCall_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_2() { return cSolidusKeyword_2; }
		
		//denominator=EInt
		public Assignment getDenominatorAssignment_3() { return cDenominatorAssignment_3; }
		
		//EInt
		public RuleCall getDenominatorEIntParserRuleCall_3_0() { return cDenominatorEIntParserRuleCall_3_0; }
	}
	public class CmdSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.orchestr8_test.Orch8.CmdSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTypeSetKeyword_0_0 = (Keyword)cTypeAssignment_0.eContents().get(0);
		private final Assignment cInstrumentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cInstrumentInstrumentCrossReference_1_0 = (CrossReference)cInstrumentAssignment_1.eContents().get(0);
		private final RuleCall cInstrumentInstrumentEStringParserRuleCall_1_0_1 = (RuleCall)cInstrumentInstrumentCrossReference_1_0.eContents().get(1);
		
		//CmdSet returns CmdSet:
		//    type='set' instrument=[Instrument|EString]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type='set' instrument=[Instrument|EString]
		public Group getGroup() { return cGroup; }
		
		//type='set'
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//'set'
		public Keyword getTypeSetKeyword_0_0() { return cTypeSetKeyword_0_0; }
		
		//instrument=[Instrument|EString]
		public Assignment getInstrumentAssignment_1() { return cInstrumentAssignment_1; }
		
		//[Instrument|EString]
		public CrossReference getInstrumentInstrumentCrossReference_1_0() { return cInstrumentInstrumentCrossReference_1_0; }
		
		//EString
		public RuleCall getInstrumentInstrumentEStringParserRuleCall_1_0_1() { return cInstrumentInstrumentEStringParserRuleCall_1_0_1; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.orchestr8_test.Orch8.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIDAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIDEStringParserRuleCall_0_0 = (RuleCall)cIDAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueEDoubleParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Parameter returns Parameter:
		//    ID=EString value=EDouble
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ID=EString value=EDouble
		public Group getGroup() { return cGroup; }
		
		//ID=EString
		public Assignment getIDAssignment_0() { return cIDAssignment_0; }
		
		//EString
		public RuleCall getIDEStringParserRuleCall_0_0() { return cIDEStringParserRuleCall_0_0; }
		
		//value=EDouble
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//EDouble
		public RuleCall getValueEDoubleParserRuleCall_1_0() { return cValueEDoubleParserRuleCall_1_0; }
	}
	public class BeatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.orchestr8_test.Orch8.Beat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIDAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIDEDoubleParserRuleCall_1_0 = (RuleCall)cIDAssignment_1.eContents().get(0);
		private final Assignment cCommandsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommandsCommandParserRuleCall_2_0 = (RuleCall)cCommandsAssignment_2.eContents().get(0);
		
		//Beat returns Beat:
		//    ':' ID=EDouble
		//    (commands+=Command)+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//':' ID=EDouble
		//(commands+=Command)+
		public Group getGroup() { return cGroup; }
		
		//':'
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }
		
		//ID=EDouble
		public Assignment getIDAssignment_1() { return cIDAssignment_1; }
		
		//EDouble
		public RuleCall getIDEDoubleParserRuleCall_1_0() { return cIDEDoubleParserRuleCall_1_0; }
		
		//(commands+=Command)+
		public Assignment getCommandsAssignment_2() { return cCommandsAssignment_2; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_2_0() { return cCommandsCommandParserRuleCall_2_0; }
	}
	public class GeneratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.orchestr8_test.Orch8.Generator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cModeAlternatives_0_0 = (Alternatives)cModeAssignment_0.eContents().get(0);
		private final Keyword cModeTypeKeyword_0_0_0 = (Keyword)cModeAlternatives_0_0.eContents().get(0);
		private final Keyword cModeCustomKeyword_0_0_1 = (Keyword)cModeAlternatives_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeEStringParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//Generator returns Generator:
		//    mode=('type'|'custom') type=EString
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//mode=('type'|'custom') type=EString
		public Group getGroup() { return cGroup; }
		
		//mode=('type'|'custom')
		public Assignment getModeAssignment_0() { return cModeAssignment_0; }
		
		//('type'|'custom')
		public Alternatives getModeAlternatives_0_0() { return cModeAlternatives_0_0; }
		
		//'type'
		public Keyword getModeTypeKeyword_0_0_0() { return cModeTypeKeyword_0_0_0; }
		
		//'custom'
		public Keyword getModeCustomKeyword_0_0_1() { return cModeCustomKeyword_0_0_1; }
		
		//type=EString
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//EString
		public RuleCall getTypeEStringParserRuleCall_1_0() { return cTypeEStringParserRuleCall_1_0; }
	}
	
	
	private final ModelElements pModel;
	private final SetupCommandElements pSetupCommand;
	private final CommandElements pCommand;
	private final MixerElements pMixer;
	private final ScoreElements pScore;
	private final InstrumentElements pInstrument;
	private final EStringElements pEString;
	private final EIntElements pEInt;
	private final EDoubleElements pEDouble;
	private final MeasureElements pMeasure;
	private final CmdInstrumentElements pCmdInstrument;
	private final CmdPlayElements pCmdPlay;
	private final CmdTempoElements pCmdTempo;
	private final CmdTimeSignatureElements pCmdTimeSignature;
	private final CmdSetElements pCmdSet;
	private final ParameterElements pParameter;
	private final BeatElements pBeat;
	private final GeneratorElements pGenerator;
	private final TerminalRule tNOTE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public Orch8GrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pSetupCommand = new SetupCommandElements();
		this.pCommand = new CommandElements();
		this.pMixer = new MixerElements();
		this.pScore = new ScoreElements();
		this.pInstrument = new InstrumentElements();
		this.pEString = new EStringElements();
		this.pEInt = new EIntElements();
		this.pEDouble = new EDoubleElements();
		this.pMeasure = new MeasureElements();
		this.pCmdInstrument = new CmdInstrumentElements();
		this.pCmdPlay = new CmdPlayElements();
		this.pCmdTempo = new CmdTempoElements();
		this.pCmdTimeSignature = new CmdTimeSignatureElements();
		this.pCmdSet = new CmdSetElements();
		this.pParameter = new ParameterElements();
		this.pBeat = new BeatElements();
		this.pGenerator = new GeneratorElements();
		this.tNOTE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.orchestr8_test.Orch8.NOTE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.orchestr8_test.Orch8".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model returns Model:
	//    (scores+=Score | instruments+=Instrument)*
	//    mixer=Mixer
	//    (scores+=Score | instruments+=Instrument)*
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//SetupCommand returns Command:
	//    CmdTempo | CmdTimeSignature | CmdInstrument | CmdSet
	//;
	public SetupCommandElements getSetupCommandAccess() {
		return pSetupCommand;
	}
	
	public ParserRule getSetupCommandRule() {
		return getSetupCommandAccess().getRule();
	}
	
	//Command returns Command:
	//    CmdTempo | CmdTimeSignature | CmdPlay | CmdInstrument | CmdSet;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//Mixer returns Mixer:
	//    'Mixer' name=EString '{'
	//        ('sampling_rate' sampling_rate=EInt)?
	//        'scores' '{' scores+=[Score|EString] (',' scores+=[Score|EString])* '}'
	//    '}';
	public MixerElements getMixerAccess() {
		return pMixer;
	}
	
	public ParserRule getMixerRule() {
		return getMixerAccess().getRule();
	}
	
	//Score returns Score:
	//    'Score' name=EString '{'
	//        ('@Setup' (setup+=SetupCommand)* )?
	//        (measures+=Measure)+
	//        ('@End' (end+=SetupCommand)* )?
	//    '}';
	public ScoreElements getScoreAccess() {
		return pScore;
	}
	
	public ParserRule getScoreRule() {
		return getScoreAccess().getRule();
	}
	
	//Instrument returns Instrument:
	//    'Instrument' name=EString '{'
	//        generator=Generator
	//        (parameters+=Parameter)*
	//    '}';
	public InstrumentElements getInstrumentAccess() {
		return pInstrument;
	}
	
	public ParserRule getInstrumentRule() {
		return getInstrumentAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EInt returns ecore::EInt:
	//    '-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//EDouble returns ecore::EDouble:
	//    '-'? INT? '.' INT (('E'|'e') '-'? INT)?;
	public EDoubleElements getEDoubleAccess() {
		return pEDouble;
	}
	
	public ParserRule getEDoubleRule() {
		return getEDoubleAccess().getRule();
	}
	
	//Measure returns Measure:
	//    {Measure}
	//    '@' ID=EInt
	//    (beats+=Beat)+
	//;
	public MeasureElements getMeasureAccess() {
		return pMeasure;
	}
	
	public ParserRule getMeasureRule() {
		return getMeasureAccess().getRule();
	}
	
	//CmdInstrument returns CmdInstrument:
	//    type='instrument' parameter=Parameter
	//;
	public CmdInstrumentElements getCmdInstrumentAccess() {
		return pCmdInstrument;
	}
	
	public ParserRule getCmdInstrumentRule() {
		return getCmdInstrumentAccess().getRule();
	}
	
	//CmdPlay returns CmdPlay:
	//    type='play' note=NOTE 'length' length=EDouble
	//;
	public CmdPlayElements getCmdPlayAccess() {
		return pCmdPlay;
	}
	
	public ParserRule getCmdPlayRule() {
		return getCmdPlayAccess().getRule();
	}
	
	//CmdTempo returns CmdTempo:
	//    type='tempo' bpm=EInt
	//;
	public CmdTempoElements getCmdTempoAccess() {
		return pCmdTempo;
	}
	
	public ParserRule getCmdTempoRule() {
		return getCmdTempoAccess().getRule();
	}
	
	//CmdTimeSignature returns CmdTimeSignature:
	//    type='time_signature' numerator=EInt '/' denominator=EInt
	//;
	public CmdTimeSignatureElements getCmdTimeSignatureAccess() {
		return pCmdTimeSignature;
	}
	
	public ParserRule getCmdTimeSignatureRule() {
		return getCmdTimeSignatureAccess().getRule();
	}
	
	//CmdSet returns CmdSet:
	//    type='set' instrument=[Instrument|EString]
	//;
	public CmdSetElements getCmdSetAccess() {
		return pCmdSet;
	}
	
	public ParserRule getCmdSetRule() {
		return getCmdSetAccess().getRule();
	}
	
	//Parameter returns Parameter:
	//    ID=EString value=EDouble
	//;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Beat returns Beat:
	//    ':' ID=EDouble
	//    (commands+=Command)+
	//;
	public BeatElements getBeatAccess() {
		return pBeat;
	}
	
	public ParserRule getBeatRule() {
		return getBeatAccess().getRule();
	}
	
	//Generator returns Generator:
	//    mode=('type'|'custom') type=EString
	//;
	public GeneratorElements getGeneratorAccess() {
		return pGenerator;
	}
	
	public ParserRule getGeneratorRule() {
		return getGeneratorAccess().getRule();
	}
	
	//terminal NOTE: ('a'..'g'|'A'..'G')('b'|'#')?('0'..'9');
	public TerminalRule getNOTERule() {
		return tNOTE;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
