/*
 * generated by Xtext 2.26.0
 */
package org.xtext.orchestr8_test.validation;

import org.eclipse.xtext.validation.Check;

import Orchestr8.*;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class Orch8Validator extends AbstractOrch8Validator {
	/*
	@Check
	public void checkCmdPlay(CmdPlay cmd) {
		String note = cmd.getNote();
		char name = 0, octave = 0, mod = 0;
		if (note.length() == 2) {
			name = note.charAt(0);
			octave = note.charAt(1);
			if (
				((name >= 'a' && name <= 'g') || (name >= 'A' && name <= 'G'))
				&& octave >= '0' && octave <= '9'
			) { return; }
			error("len = 2. Invalid note name make sure it follows the english " +
					"letter notation followed by a number representing " +
					"the octave (e.g: B4, Cb3, D#5).",
					Orchestr8Package.Literals.CMD_PLAY__NOTE,
					"invalidNoteName");
		} else if (note.length() == 3) {
			name = note.charAt(0);
			mod = note.charAt(1);
			octave = note.charAt(2);
			if (
				((name >= 'a' && name <= 'g') || (name >= 'A' && name <= 'G'))
				&& (mod == 'b' || mod == '#')
				&& octave >= '0' && octave <= '9'
			) { return; }
			error("len = 3. Invalid note name make sure it follows the english " +
					"letter notation followed by a number representing " +
					"the octave (e.g: B4, Cb3, D#5).",
					Orchestr8Package.Literals.CMD_PLAY__NOTE,
					"invalidNoteName");
		}
		
		
		error("Invalid note name make sure it follows the english " +
				"letter notation followed by a number representing " +
				"the octave (e.g: B4, Cb3, D#5).",
				Orchestr8Package.Literals.CMD_PLAY__NOTE,
				"invalidNoteName");
	}*/
	
	public static final String NEGATIVE_BPM = "negativeBpm";
	public static final String ZERO_BPM = "zeroBpm";
	public static final String FAST_BPM = "fastBpm";
	public static final String INVALID_TIME_SIGNATURE_NUMERATOR = "invalidTimeSignatureNumerator";
	public static final String INVALID_TIME_SIGNATURE_DENOMINATOR= "invalidTimeSignatureDenominator";
	public static final String INVALID_MEASURE_ID = "invalidMeasureID";
	public static final String NEGATIVE_BEAT_ID = "negativeBeatID";
	public static final String INVALID_BEAT_ID = "invalidBeatID";
	public static final String INVALID_SAMPLING_RATE = "invalidSamplingRate";

	
	@Check
	public void checkCmdTempo(CmdTempo cmd) {
		int bpm = cmd.getBpm();
		if (bpm < 0) {
			error("Tempo can't have negative bpm.",
					Orchestr8Package.Literals.CMD_TEMPO__BPM,
					NEGATIVE_BPM);
		} else if (bpm == 0) {
			error("Tempo can't have 0 bpm.",
					Orchestr8Package.Literals.CMD_TEMPO__BPM,
					ZERO_BPM);
		} else if (bpm > 300) {
			error("Tempo is too fast! Make sure it is below 300 bpm.",
					Orchestr8Package.Literals.CMD_TEMPO__BPM,
					FAST_BPM);
		}
	}
	
	@Check
	public void checkCmdTimeSignature(CmdTimeSignature cmd) {
		int num = cmd.getNumerator();
		int den = cmd.getDenominator();
		if (num <= 0) {
			error("Invalid time signature. The time signature's numerator "
					+ "must be greater than 0.",
					Orchestr8Package.Literals.CMD_TIME_SIGNATURE__NUMERATOR,
					INVALID_TIME_SIGNATURE_NUMERATOR);
		} else if (den <= 0) {
			error("Invalid time signature. The time signature's denominator "
					+ "must be greater than 0.",
					Orchestr8Package.Literals.CMD_TIME_SIGNATURE__DENOMINATOR,
					INVALID_TIME_SIGNATURE_DENOMINATOR);
		}
	}
	
	
	@Check
	public void checkMeasureID(Measure measure) {
		if (measure.getID() <= 0) {
			error("Measure ID must be greater than 0.",
					Orchestr8Package.Literals.MEASURE__ID,
					INVALID_MEASURE_ID);
		}
	}
	
	@Check
	public void checkBeatID(Beat beat) {
		double id = beat.getID();
		if (id < 0.0) {
			error("Beat ID cannont be a negative number.",
					Orchestr8Package.Literals.BEAT__ID,
					NEGATIVE_BEAT_ID);
		}
		else if (id < 1.0) {
			error("Beats start at 1.0. If adding commands before the " +
					"composition starts is desirable, " +
					"consider adding them to @Setup.",
					Orchestr8Package.Literals.BEAT__ID,
					INVALID_BEAT_ID);
		}
	}
	
	@Check
	public void checkMixerSamplingRate(Mixer mixer) {
		// 50 is just a low enough value,
		// 100 could be desired in some cases. Probably not
		if (mixer.getSampling_rate() <= 0) {
			error("Sampling Rate needs to be greater than 0",
					Orchestr8Package.Literals.MIXER__SAMPLING_RATE,
					INVALID_SAMPLING_RATE);
		}
	}
	
//	public static final String INVALID_NAME = "invalidName";
//
//	@Check
//	public void checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.getName().charAt(0))) {
//			warning("Name should start with a capital",
//					Orch8Package.Literals.GREETING__NAME,
//					INVALID_NAME);
//		}
//	}
	
}
