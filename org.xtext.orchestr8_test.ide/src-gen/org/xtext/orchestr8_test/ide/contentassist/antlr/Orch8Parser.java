/*
 * generated by Xtext 2.26.0
 */
package org.xtext.orchestr8_test.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.orchestr8_test.ide.contentassist.antlr.internal.InternalOrch8Parser;
import org.xtext.orchestr8_test.services.Orch8GrammarAccess;

public class Orch8Parser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(Orch8GrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, Orch8GrammarAccess grammarAccess) {
			builder.put(grammarAccess.getModelAccess().getAlternatives_0(), "rule__Model__Alternatives_0");
			builder.put(grammarAccess.getModelAccess().getAlternatives_2(), "rule__Model__Alternatives_2");
			builder.put(grammarAccess.getCommandAccess().getAlternatives(), "rule__Command__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getEDoubleAccess().getAlternatives_4_0(), "rule__EDouble__Alternatives_4_0");
			builder.put(grammarAccess.getGeneratorAccess().getModeAlternatives_0_0(), "rule__Generator__ModeAlternatives_0_0");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getMixerAccess().getGroup(), "rule__Mixer__Group__0");
			builder.put(grammarAccess.getMixerAccess().getGroup_3(), "rule__Mixer__Group_3__0");
			builder.put(grammarAccess.getMixerAccess().getGroup_7(), "rule__Mixer__Group_7__0");
			builder.put(grammarAccess.getScoreAccess().getGroup(), "rule__Score__Group__0");
			builder.put(grammarAccess.getScoreAccess().getGroup_3(), "rule__Score__Group_3__0");
			builder.put(grammarAccess.getScoreAccess().getGroup_5(), "rule__Score__Group_5__0");
			builder.put(grammarAccess.getInstrumentAccess().getGroup(), "rule__Instrument__Group__0");
			builder.put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
			builder.put(grammarAccess.getEDoubleAccess().getGroup(), "rule__EDouble__Group__0");
			builder.put(grammarAccess.getEDoubleAccess().getGroup_4(), "rule__EDouble__Group_4__0");
			builder.put(grammarAccess.getMeasureAccess().getGroup(), "rule__Measure__Group__0");
			builder.put(grammarAccess.getCmdInstrumentAccess().getGroup(), "rule__CmdInstrument__Group__0");
			builder.put(grammarAccess.getCmdPlayAccess().getGroup(), "rule__CmdPlay__Group__0");
			builder.put(grammarAccess.getCmdTempoAccess().getGroup(), "rule__CmdTempo__Group__0");
			builder.put(grammarAccess.getCmdTimeSignatureAccess().getGroup(), "rule__CmdTimeSignature__Group__0");
			builder.put(grammarAccess.getCmdSetAccess().getGroup(), "rule__CmdSet__Group__0");
			builder.put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
			builder.put(grammarAccess.getBeatAccess().getGroup(), "rule__Beat__Group__0");
			builder.put(grammarAccess.getGeneratorAccess().getGroup(), "rule__Generator__Group__0");
			builder.put(grammarAccess.getModelAccess().getScoresAssignment_0_0(), "rule__Model__ScoresAssignment_0_0");
			builder.put(grammarAccess.getModelAccess().getInstrumentsAssignment_0_1(), "rule__Model__InstrumentsAssignment_0_1");
			builder.put(grammarAccess.getModelAccess().getMixerAssignment_1(), "rule__Model__MixerAssignment_1");
			builder.put(grammarAccess.getModelAccess().getScoresAssignment_2_0(), "rule__Model__ScoresAssignment_2_0");
			builder.put(grammarAccess.getModelAccess().getInstrumentsAssignment_2_1(), "rule__Model__InstrumentsAssignment_2_1");
			builder.put(grammarAccess.getMixerAccess().getNameAssignment_1(), "rule__Mixer__NameAssignment_1");
			builder.put(grammarAccess.getMixerAccess().getSampling_rateAssignment_3_1(), "rule__Mixer__Sampling_rateAssignment_3_1");
			builder.put(grammarAccess.getMixerAccess().getScoresAssignment_6(), "rule__Mixer__ScoresAssignment_6");
			builder.put(grammarAccess.getMixerAccess().getScoresAssignment_7_1(), "rule__Mixer__ScoresAssignment_7_1");
			builder.put(grammarAccess.getScoreAccess().getNameAssignment_1(), "rule__Score__NameAssignment_1");
			builder.put(grammarAccess.getScoreAccess().getSetupAssignment_3_1(), "rule__Score__SetupAssignment_3_1");
			builder.put(grammarAccess.getScoreAccess().getMeasuresAssignment_4(), "rule__Score__MeasuresAssignment_4");
			builder.put(grammarAccess.getScoreAccess().getEndAssignment_5_1(), "rule__Score__EndAssignment_5_1");
			builder.put(grammarAccess.getInstrumentAccess().getNameAssignment_1(), "rule__Instrument__NameAssignment_1");
			builder.put(grammarAccess.getInstrumentAccess().getGeneratorAssignment_3(), "rule__Instrument__GeneratorAssignment_3");
			builder.put(grammarAccess.getInstrumentAccess().getParametersAssignment_4(), "rule__Instrument__ParametersAssignment_4");
			builder.put(grammarAccess.getMeasureAccess().getIDAssignment_2(), "rule__Measure__IDAssignment_2");
			builder.put(grammarAccess.getMeasureAccess().getBeatsAssignment_3(), "rule__Measure__BeatsAssignment_3");
			builder.put(grammarAccess.getCmdInstrumentAccess().getTypeAssignment_0(), "rule__CmdInstrument__TypeAssignment_0");
			builder.put(grammarAccess.getCmdInstrumentAccess().getParameterAssignment_1(), "rule__CmdInstrument__ParameterAssignment_1");
			builder.put(grammarAccess.getCmdPlayAccess().getTypeAssignment_0(), "rule__CmdPlay__TypeAssignment_0");
			builder.put(grammarAccess.getCmdPlayAccess().getNoteAssignment_1(), "rule__CmdPlay__NoteAssignment_1");
			builder.put(grammarAccess.getCmdPlayAccess().getLengthAssignment_3(), "rule__CmdPlay__LengthAssignment_3");
			builder.put(grammarAccess.getCmdTempoAccess().getTypeAssignment_0(), "rule__CmdTempo__TypeAssignment_0");
			builder.put(grammarAccess.getCmdTempoAccess().getBpmAssignment_1(), "rule__CmdTempo__BpmAssignment_1");
			builder.put(grammarAccess.getCmdTimeSignatureAccess().getTypeAssignment_0(), "rule__CmdTimeSignature__TypeAssignment_0");
			builder.put(grammarAccess.getCmdTimeSignatureAccess().getNumeratorAssignment_1(), "rule__CmdTimeSignature__NumeratorAssignment_1");
			builder.put(grammarAccess.getCmdTimeSignatureAccess().getDenominatorAssignment_3(), "rule__CmdTimeSignature__DenominatorAssignment_3");
			builder.put(grammarAccess.getCmdSetAccess().getTypeAssignment_0(), "rule__CmdSet__TypeAssignment_0");
			builder.put(grammarAccess.getCmdSetAccess().getInstrumentAssignment_1(), "rule__CmdSet__InstrumentAssignment_1");
			builder.put(grammarAccess.getParameterAccess().getIDAssignment_0(), "rule__Parameter__IDAssignment_0");
			builder.put(grammarAccess.getParameterAccess().getValueAssignment_1(), "rule__Parameter__ValueAssignment_1");
			builder.put(grammarAccess.getBeatAccess().getIDAssignment_1(), "rule__Beat__IDAssignment_1");
			builder.put(grammarAccess.getBeatAccess().getCommandsAssignment_2(), "rule__Beat__CommandsAssignment_2");
			builder.put(grammarAccess.getGeneratorAccess().getModeAssignment_0(), "rule__Generator__ModeAssignment_0");
			builder.put(grammarAccess.getGeneratorAccess().getTypeAssignment_1(), "rule__Generator__TypeAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private Orch8GrammarAccess grammarAccess;

	@Override
	protected InternalOrch8Parser createParser() {
		InternalOrch8Parser result = new InternalOrch8Parser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public Orch8GrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(Orch8GrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
